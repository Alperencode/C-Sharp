<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAAMMOAADDDgAAAAAAAAAA
        AAAAAAAAAAAAAEpIOgBKSDoASkg6IkpIOqlKSDr1Skg6/0pIOv9KSDr/Skg6/0pIOv9KSDr/Skg6/0pI
        Ov9KSDr/Skg6/0pIOv9KSDr/Skg6/0pIOv9KSDr/Skg6/0pIOv9KSDr/Skg69UpIOqlKSDoiSkg6AEtJ
        OQAAAAAAAAAAAAAAAAAAAAAASkg6AEpIOgtKSDqoSkg6/0lHOf9LSDv/S0k7/0pIOv9JRzn/Skg6/0pI
        Ov9KSDr/Skg6/0tJO/9LSTv/SUc5/0pIOv9KSDr/Skg6/0pIOf9KSDr/Skg7/0pIO/9KSDn/Skg6/0pI
        OqhKSDoLSkg6AAAAAAAAAAAAAAAAAAAAAABKSDoASkg6OEpIOvBJRzn/a2lg/5eVkv+jop7/np2Z/2Nh
        V/9JRzn/Skg6/09NQP+BgHn/nZyZ/6WkoP+Mi4X/UE5B/0pIOv9KSDn/SkRU/0w/kP9YT6L/W1Sj/1FN
        aP9KSDn/Skg68EpIOjhKSDoAAAAAAAAAAAAAAAAAAAAAAEpIOgBKSDpNSkg6+kxKPP+WlZL/yMfJ/9XU
        1//X1tn/jo2H/0hGOP9JRzn/Xl1S/7Oys//PztH/1tXY/8rJyv9jYVb/SEY4/0pIOP9KPn7/UT3L/2NZ
        3v9kWuL/W1So/0pIPP9KSDr6Skg6TUpIOgAAAAAAAAAAAAAAAAAAAAAASkg6AEpIOk5KSDr7TEo9/5iX
        lP/Gxcj/09LU/9XU1v+RkIr/SEY4/0lHOP9gXlP/tLKz/87Nz//U09X/ysnK/2VjWP9IRjj/Skg4/0o9
        gf9RPsr/Y1nb/2Ra3/9cVKv/Skg9/0pIOvtKSDpOSkg6AAAAAAAAAAAAAAAAAAAAAABKSDoASkg6TkpI
        OvtLSTz/lJOQ/8fGyf/V1Nf/1tXY/4yKhP9IRjj/SUc5/11bUP+ysbL/z87Q/9bV2P/Ix8j/YV9U/0lH
        OP9KSDj/Sj58/1A9yv9jWN3/ZFrh/1tUpf9KSDz/Skg6+0pIOk5KSDoAAAAAAAAAAAAAAAAAAAAAAEpI
        OgBKSDpOSkg6+0lHOf9kYlj/ioiD/5WUj/+Qj4n/XVtQ/0lHOf9KSDr/Tkw+/3d1bv+Pjon/l5WQ/4B+
        d/9OTD//Skg6/0pIOf9KRU7/S0CB/1VNkf9YUpL/UExe/0pIOf9KSDr7Skg6TkpIOgAAAAAAAAAAAAAA
        AAAAAAAASkg6AEpIOk5KSDr7Skg6/0hGOP9IRjj/SEY4/0dFN/9IRjj/Skg6/0pIOv9JRzn/SEY3/0hG
        OP9IRjj/R0U3/0lHOf9KSDr/Skg6/0pIOv9JRzn/SUc4/0lHOf9JRzn/Skg6/0pIOvtKSDpOSkg6AAAA
        AAAAAAAAAAAAAAAAAABKSDoASkg6TkpIOvtJRzn/ZmRa/4+Oif+bmZX/lZSO/19dUv9JRzn/Skg6/05M
        P/97eXL/lZSQ/5yblv+Eg3v/T00//0pIOv9JRzr/Vlgx/3aCHf+Gki3/iJI0/2RnN/9JRzr/Skg6+0pI
        Ok5KSDoAAAAAAAAAAAAAAAAAAAAAAEpIOgBKSDpOSkg6+0xKPP+VlJH/x8bJ/9XU1//W1dj/jYuF/0hG
        OP9JRzn/XlxR/7Oysv/PztD/1tXY/8nIyf9iYFX/SUY4/0lHO/9veh3/nrcL/7TJLf+4zC//kZ0z/0tJ
        Ov9KSDr7Skg6TkpIOgAAAAAAAAAAAAAAAAAAAAAASkg6AEpIOk5KSDr7TEo9/5iXlP/Gxcj/09LU/9XU
        1v+RkIr/SEY4/0lHOP9gXlP/tLK0/87Nz//U09X/ysnK/2VjWP9IRjj/SUc7/3F9G/+etgz/s8cu/7bK
        L/+UoTL/TEo6/0pIOvtKSDpOSkg6AAAAAAAAAAAAAAAAAAAAAABKSDoASkg6TkpIOvtMSjz/lpSR/8jH
        yf/V1Nf/1tXY/42Mhv9IRjj/SUc5/15cUf+zsrP/z87R/9bV2P/JyMr/YmBV/0hGOP9JRzv/b3sd/563
        C/+1yS3/uMwv/5GeM/9LSTr/Skg6+0pIOk5KSDoAAAAAAAAAAAAAAAAAAAAAAEpIOgBKSDpOSkg6+0lH
        Of9oZ13/kpGN/5+dmf+ZmJP/YV9U/0lHOf9KSDr/T00//358df+ZmJT/oJ+b/4iHgP9PTUD/Skg6/0lH
        Ov9XWjD/eIUc/4mVLf+LljP/Zmo3/0lHOv9KSDr7Skg6TkpIOgAAAAAAAAAAAAAAAAAAAAAASkg6AEpI
        Ok5KSDr7Skg6/0hGOP9IRjj/SEY4/0dFN/9IRjj/Skg6/0pIOv9JRzn/SEY4/0hGOP9IRjj/R0U3/0lH
        Of9KSDr/Skg6/0pHOf9KRjj/SUY4/0lGOP9JRjj/Skg6/0pIOvtKSDpOSkg6AAAAAAAAAAAAAAAAAAAA
        AABKSDoASkg6TkpIOvtJRzn/YmBV/4eFgP+RkIr/i4qE/1xaTv9JRzn/Skg6/01LPv90cmv/jYuG/5KR
        i/98enL/Tkw+/0pIOv9KRzn/RVdR/zuCkf9blqH/Zpef/1VoY/9KRzn/Skg6+0pIOk5KSDoAAAAAAAAA
        AAAAAAAAAAAAAEpIOgBKSDpOSkg6+0tJPP+Uko//x8bI/9XU1v/W1df/i4mD/0hGOP9JRzn/XVtQ/7Gw
        sf/PztD/1tXX/8jGx/9hX1P/SUc4/0tHOP82f47/N8bx/3zj/v+C5///ba26/0pJPP9KSDr7Skg6TkpI
        OgAAAAAAAAAAAAAAAAAAAAAASkg6AEpIOk5KSDr7TEo9/5iXlP/Gxcj/09LU/9XU1v+RkIr/SEY4/0lH
        OP9gXlP/tLOz/87Nz//U09X/ysnK/2VjWP9IRjj/S0c4/zSElv86xvH/feL+/4Hm//9wtML/S0s9/0pI
        OvtKSDpOSkg6AAAAAAAAAAAAAAAAAAAAAABKSDoASkg6TkpIOvtMSjz/l5WS/8jHyf/V1Nf/19bZ/4+N
        h/9IRjj/SUc4/19dUv+0s7T/z87R/9bV2P/Kycv/Y2FW/0hGOP9LRzj/NIKT/zjH8/995P7/gun//2+y
        v/9LSjz/Skg6+0pIOk5KSDoAAAAAAAAAAAAAAAAAAAAAAEpIOgBKSDpOSkg6+0pIOf9ta2L/mpmW/6em
        o/+ioJ3/ZWNY/0lHOf9KSDr/UE5B/4SDff+hoJ3/qaek/5COif9RT0L/Skg5/0pHOP9CX17/OJau/2Ou
        wP9vsb//Wnd2/0pHOf9KSDr7Skg6TkpIOgAAAAAAAAAAAAAAAAAAAAAASkg6AEpIOk5KSDr7Skg6/0lH
        Ov9LSTz/S0k8/0pIO/9IRjn/SUc6/0lHOv9JRzr/SUc6/0tJPP9LSTz/SUc6/0lHOv9JRzr/SUc6/0lG
        Of9JSDz/SUk9/0pJPP9KRzn/Skg6/0pIOvtKSDpOSkg6AAAAAAAAAAAAAAAAAAAAAABKSDoASkg6TkpI
        OvtKSDr/TUw4/1JTNP9UVDb/VVU5/1VVOf9VVTn/VVU5/1VVOf9VVTn/VVU5/1VVOf9VVTn/VVU5/1VV
        Of9VVTn/VVU5/1VVOf9VVTn/VVU5/05NOv9KSDr/Skg6+0pIOk5KSDoAAAAAAAAAAAAAAAAAAAAAAEpI
        OgBKSDpOSkg6+0pJOv9yfxv/jKII/52vI/+ltjH/pbYx/6W2Mf+ltjH/pbYx/6W2Mf+ltjH/pbYx/6W2
        Mf+ltjH/pbYx/6W2Mf+ltjH/pbYx/6W2Mf+mtzH/gos0/0pJOv9KSDr7Skg6TkpIOgAAAAAAAAAAAAAA
        AAAAAAAASkg6AEpIOk5KSDr7TEo5/3+QEv+XsQH/rcIj/7XJMP+1yS//tckv/7XJL/+1yS//tckv/7bK
        L/+2yi//tckv/7XJL/+1yS//tckv/7XJL/+1yS//tckv/7fLL/+UojL/TEo6/0pIOvtKSDpOSkg6AAAA
        AAAAAAAAAAAAAAAAAABKSDoASkg6TkpIOvtMSjn/fo8S/5awAf+swSP/tMgw/7XJL/+1yS//tMgv/7TI
        L/+zxy//qLow/6i6MP+zxy//tMgv/7TIL/+1yS//tckv/7TIL/+0yC//tsov/5OhMv9MSjr/Skg6+0pI
        Ok5KSDoAAAAAAAAAAAAAAAAAAAAAAEpIOgBKSDpOSkg6+0xKOf9+jxL/lrAB/6zBI/+1yTD/macy/52t
        Mf+1yS//tMgv/4qVM/9jZzf/Y2c3/4qVM/+0yC//tckv/52tMf+ZpzL/tckv/7TIL/+2yi//k6Ey/0xK
        Ov9KSDr7Skg6TkpIOgAAAAAAAAAAAAAAAAAAAAAASkg6AEpIOk5KSDr7TEo5/36PEv+WsAH/rMEj/7bK
        MP98hTX/hpA0/7bKL/+0yC//l6Uy/5+uMf+frjH/l6Uy/7TIL/+2yi//hpA0/3yFNf+1yi//tMgv/7bK
        L/+ToTL/TEo6/0pIOvtKSDpOSkg6AAAAAAAAAAAAAAAAAAAAAABKSDoASkg6TkpIOvtMSjn/fo8S/5aw
        Af+swSP/tckw/6W2Mf+nuTD/tckv/7TIL/+1yS//tckv/7XJL/+1yS//tMgv/7XJL/+nuTD/pbYx/7TJ
        L/+0yC//tsov/5OhMv9MSjr/Skg6+0pIOk5KSDoAAAAAAAAAAAAAAAAAAAAAAEpIOgBKSDpOSkg6+0xK
        Of9+jxL/lrAB/6zBI/+0yDD/tckv/7XJL/+0yC//tMgv/7TIL/+0yC//tMgv/7TIL/+0yC//tMgv/7XJ
        L/+1yS//tMgv/7TIL/+2yi//k6Ey/0xKOv9KSDr7Skg6TkpIOgAAAAAAAAAAAAAAAAAAAAAASkg6AEpI
        Ok1KSDr6S0o5/32OE/+XsAD/rMIi/7XJMP+1yS//tckv/7XJL/+1yS//tckv/7XJL/+1yS//tckv/7XJ
        L/+1yS//tckv/7XJL/+1yS//tckv/7fLL/+SnzP/S0o6/0pIOvpKSDpNSkg6AAAAAAAAAAAAAAAAAAAA
        AABKSDoASkg6OEpIOvBKSDr/XWEs/213H/91fiz/eoI1/3qCNf96gjX/eoI1/3qCNf96gjX/eoI1/3qC
        Nf96gjX/eoI1/3qCNf96gjX/eoI1/3qCNf96gjX/eoI1/2NmN/9KSDr/Skg68EpIOjhKSDoAAAAAAAAA
        AAAAAAAAAAAAAEpIOgBKSDoLSkg6qEpIOv9JRzv/SUY7/0hGOv9IRjr/SEY6/0hGOv9IRjr/SEY6/0hG
        Ov9IRjr/SEY6/0hGOv9IRjr/SEY6/0hGOv9IRjr/SEY6/0hGOv9IRjr/SUc6/0pIOv9KSDqoSkg6C0pI
        OgAAAAAAAAAAAAAAAAAAAAAAS0k7AEpIOgBKSDoiSkg6qUpIOvVKSDr/Skg6/0pIOv9KSDr/Skg6/0pI
        Ov9KSDr/Skg6/0pIOv9KSDr/Skg6/0pIOv9KSDr/Skg6/0pIOv9KSDr/Skg6/0pIOv9KSDr1Skg6qUpI
        OiJKSDoAS0k6AAAAAAAAAAAA8AAAD+AAAAfgAAAH4AAAB+AAAAfgAAAH4AAAB+AAAAfgAAAH4AAAB+AA
        AAfgAAAH4AAAB+AAAAfgAAAH4AAAB+AAAAfgAAAH4AAAB+AAAAfgAAAH4AAAB+AAAAfgAAAH4AAAB+AA
        AAfgAAAH4AAAB+AAAAfgAAAH4AAAB/AAAA8=
</value>
  </data>
</root>